# Dockerfile for h2spec testing - extends Dockerfile.test
FROM robnomad/crystal:dev-hoard

# Install system dependencies including OpenSSL for cert generation
RUN apk add --no-cache \
    bash \
    curl \
    git \
    make \
    openssl \
    openssl-dev \
    python3 \
    py3-pip \
    nodejs \
    npm \
    parallel \
    coreutils \
    grep

# Install Python packages with HTTP/2 support
RUN pip3 install --break-system-packages "httpx[http2]" h2

# Install h2spec
RUN ARCH=$(uname -m) && \
    if [ "$ARCH" = "x86_64" ]; then \
      H2SPEC_ARCH="amd64"; \
    elif [ "$ARCH" = "aarch64" ]; then \
      H2SPEC_ARCH="arm64"; \
    else \
      echo "Unsupported architecture: $ARCH"; \
      exit 1; \
    fi && \
    curl -L https://github.com/summerwind/h2spec/releases/download/v2.6.0/h2spec_linux_${H2SPEC_ARCH}.tar.gz -o h2spec.tar.gz && \
    tar -xzf h2spec.tar.gz && \
    mv h2spec /usr/local/bin/ && \
    chmod +x /usr/local/bin/h2spec && \
    rm h2spec.tar.gz

WORKDIR /app

# Copy dependency files first for better caching
COPY shard.yml shard.lock ./
RUN shards install --production

# Copy source code
COPY . .

# Generate test certificates at build time
RUN mkdir -p /certs && \
    openssl req -x509 -newkey rsa:2048 -keyout /certs/server.key -out /certs/server.crt \
    -days 365 -nodes -subj "/CN=localhost" && \
    openssl req -x509 -newkey rsa:2048 -keyout /certs/client.key -out /certs/client.crt \
    -days 365 -nodes -subj "/CN=client" && \
    chmod 644 /certs/*

# Build the servers
RUN crystal build examples/basic_server.cr -o basic_server --release && \
    crystal build examples/h2spec_server.cr -o h2spec_server --release

# Expose the server port
EXPOSE 8443

# Create a script to run tests
RUN cat > /app/run-h2spec-tests.sh << 'EOF'
#!/bin/bash
set -e

echo "Starting h2spec-optimized server..."
/app/h2spec_server --port 8443 &
SERVER_PID=$!

# Wait for server to start
echo "Waiting for server to be ready..."
for i in {1..30}; do
    if curl -k https://localhost:8443/ >/dev/null 2>&1; then
        echo "Server is ready!"
        break
    fi
    if [ $i -eq 30 ]; then
        echo "Server failed to start"
        exit 1
    fi
    sleep 1
done

echo "Running h2spec tests..."
h2spec -h localhost -p 8443 -t -j /app/h2spec_results.json | tee /app/h2spec_results.txt

# Kill the server
kill $SERVER_PID

echo "Tests completed. Results saved to h2spec_results.txt and h2spec_results.json"
EOF

RUN chmod +x /app/run-h2spec-tests.sh

CMD ["/app/run-h2spec-tests.sh"]