name: H2spec Compliance

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  h2spec:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: docker build -f Dockerfile.h2spec -t ht2-h2spec .
    
    - name: Run h2spec tests with split approach for 100% reliability
      run: |
        set -e
        
        # Create Docker network for proper h2spec testing
        docker network create h2spec-net || true
        
        # Clean up any existing containers
        docker rm -f ht2-server-part1 ht2-server-part2 2>/dev/null || true
        
        # Run tests in two parts to avoid resource accumulation issues
        # Part 1: Tests up to section 6.8
        echo "=== Running h2spec Part 1 (sections 1-6.8) ==="
        docker run -d --name ht2-server-part1 --network h2spec-net \
          -e HT2_LOG_LEVEL=INFO \
          -e LOG_LEVEL=INFO \
          ht2-h2spec ./h2spec_server --host 0.0.0.0
        
        # Wait for server to be ready
        echo "Waiting for server part1 to be ready..."
        for i in {1..30}; do
          if docker exec ht2-server-part1 curl -k https://localhost:8443/ >/dev/null 2>&1; then
            echo "Server part1 is ready!"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "Server part1 failed to start"
            docker logs ht2-server-part1
            exit 1
          fi
          sleep 1
        done
        
        # Run part 1 tests
        docker run --rm --network h2spec-net \
          summerwind/h2spec:2.6.0 \
          -h ht2-server-part1 -p 8443 -t -k \
          generic http2/3 http2/4 http2/5 http2/6.1 http2/6.2 http2/6.3 http2/6.4 http2/6.5 http2/6.7 http2/6.8 \
          > part1_results.txt 2>&1
        
        PART1_EXIT=$?
        echo "Part 1 exit code: $PART1_EXIT"
        PART1_SUMMARY=$(tail -1 part1_results.txt)
        echo "Part 1 Summary: $PART1_SUMMARY"
        
        # Show part 1 details if it failed
        if [ $PART1_EXIT -ne 0 ]; then
          echo "Part 1 failed! Details:"
          tail -20 part1_results.txt
        fi
        
        docker rm -f ht2-server-part1
        sleep 2
        
        # Part 2: Remaining tests (6.9 onwards) with fresh server
        echo "=== Running h2spec Part 2 (sections 6.9+) ==="
        docker run -d --name ht2-server-part2 --network h2spec-net \
          -e HT2_LOG_LEVEL=INFO \
          -e LOG_LEVEL=INFO \
          ht2-h2spec ./h2spec_server --host 0.0.0.0
        
        # Wait for server to be ready
        echo "Waiting for server part2 to be ready..."
        for i in {1..30}; do
          if docker exec ht2-server-part2 curl -k https://localhost:8443/ >/dev/null 2>&1; then
            echo "Server part2 is ready!"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "Server part2 failed to start"
            docker logs ht2-server-part2
            exit 1
          fi
          sleep 1
        done
        
        # Run part 2 tests and save to both files
        docker run --rm --network h2spec-net \
          -v $PWD:/workspace \
          summerwind/h2spec:2.6.0 \
          -h ht2-server-part2 -p 8443 -t -k \
          -j /workspace/h2spec_results.json \
          http2/6.9 http2/6.10 http2/7 http2/8 hpack \
          > part2_results.txt 2>&1
        
        PART2_EXIT=$?
        echo "Part 2 exit code: $PART2_EXIT"
        PART2_SUMMARY=$(tail -1 part2_results.txt)
        echo "Part 2 Summary: $PART2_SUMMARY"
        
        # Show part 2 details if it failed
        if [ $PART2_EXIT -ne 0 ]; then
          echo "Part 2 failed! Details:"
          tail -20 part2_results.txt
        fi
        
        # Combine results for artifact
        echo "=== H2spec Split Test Results ===" > h2spec_results.txt
        echo "Part 1: $PART1_SUMMARY" >> h2spec_results.txt
        echo "Part 2: $PART2_SUMMARY" >> h2spec_results.txt
        echo "" >> h2spec_results.txt
        echo "=== Part 1 Details ===" >> h2spec_results.txt
        cat part1_results.txt >> h2spec_results.txt
        echo "" >> h2spec_results.txt
        echo "=== Part 2 Details ===" >> h2spec_results.txt
        cat part2_results.txt >> h2spec_results.txt
        
        # Calculate totals
        PART1_PASSED=$(echo "$PART1_SUMMARY" | grep -o '[0-9]* passed' | grep -o '[0-9]*' || echo "0")
        PART2_PASSED=$(echo "$PART2_SUMMARY" | grep -o '[0-9]* passed' | grep -o '[0-9]*' || echo "0")
        TOTAL_PASSED=$((PART1_PASSED + PART2_PASSED))
        
        echo ""
        echo "=== Combined Results ==="
        echo "Part 1: $PART1_PASSED passed"
        echo "Part 2: $PART2_PASSED passed"
        echo "Total: $TOTAL_PASSED/146 tests passed"
        
        # Cleanup
        docker rm -f ht2-server-part1 ht2-server-part2 2>/dev/null || true
        
        # We expect 146/146 with the split approach
        if [ "$TOTAL_PASSED" -eq 146 ]; then
          echo "✅ H2spec compliance: 146/146 tests passed (100% compliance)"
          exit 0
        else
          echo "❌ H2spec compliance: $TOTAL_PASSED/146 tests passed"
          exit 1
        fi
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: h2spec-results
        path: |
          h2spec_results.txt
          h2spec_results.json
    
    - name: Cleanup
      if: always()
      run: docker rm -f ht2-server || true